# coding: utf-8

import sys
import re
import random
from operator import itemgetter
import urlparse
import urllib
#from urllib.parse  import unquote
from string import digits
from collections import Counter




# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–±–∏—Ä–∞–µ—Ç N —Å–ª—É—á–∞–π–Ω—ã—Ö —É—Ä–ª–æ–≤ —Å —Å–∞–π—Ç–∞
def random_url(file_path, N_URLS):
    urls = list()

    with open(file_path) as f:
        for line in f:
            urls.append(line)
    random.shuffle(urls)

    res = urls[:N_URLS]
    return res


def add_feature(features, name):
    features.setdefault(name, 0)
    features[name] += 1


def get_features(features, urls):
    for line in urls:
        line = line.strip('\n')
        line = urlparse.urlparse(line)
        index = 0

        for segment in urllib.unquote(line.path).split('/'):
            if segment == '':
                continue

            add_feature(features, 'segment_name_{0}:{1}'.format(index, segment))
            add_feature(features, 'segment_len_{0}:{1}'.format(index, len(segment)))

            if segment.isdigit():
                add_feature(features, 'segment_[0-9]_{0}:1'.format(index))

            if re.match(r'[^\d]+\d+[^\d]', segment):
                add_feature(features, 'segment_substr[0-9]_{0}:1'.format(index))

            if re.match(r'.+[.]\w+', segment):
                ext = re.findall(r'.+[.](\w+)', segment)[0]
                add_feature(features, 'segment_ext_{0}:{1}'.format(index, ext))

            if re.match(r'[^\d]+\d+[^\d]', segment) and re.match(r'.+[.]\w+', segment):
                ext = re.findall(r'.+[.](\w+)', segment)[0]
                add_feature(features, 'segment_ext_substr[0-9]_{0}:{1}'.format(index, ext))

            index += 1

        add_feature(features, 'segments:{0}'.format(index))

        parameters = urllib.unquote(line.params).split('&')
        if parameters[0] != '':
            for param in parameters:
                add_feature(features, 'param:{0}'.format(param))
                add_feature(features, 'param_name:{0}'.format(param.split('=')[0]))



def extract_features(INPUT_FILE_1, INPUT_FILE_2, OUTPUT_FILE):
    #______Name_features_______#
    
    # 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø—É—Ç–∏: segments = {}
    
    # 2. –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–Ω–æ–π —á–∞—Å—Ç–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º): param_name = {}
    
    # 3. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–Ω–æ–π —á–∞—Å—Ç–∏ –ø–∞—Ä—ã < ùëùùëéùëüùëéùëöùëíùë°ùëíùëüùë† = ùë£ùëéùëôùë¢ùëí > ùëùùëéùëüùëéùëö ‚à∂< ùëùùëéùëüùëéùëöùëíùë°ùëíùëüùë† = ùë£ùëéùëôùë¢ùëí > : param = {}
    
    # 4. –°–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏:
    # (a) –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º < —Å—Ç—Ä–æ–∫–∞ >
    #segment_name = {}
    # (b) –°–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä
    #segment_0_9 = {}
    # (c) < —Å—Ç—Ä–æ–∫–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ü–∏—Ñ—Ä >
    #segment_substr_0_9 = {}
    # (d) –ò–º–µ–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    #segment_ext = {}
    # (e) –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∏–∑ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    #segment_ext_substr_0_9 = {}
    # (f) –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤:
    #segment_len = {}

    #___________________________#
    
    
    N_URLS = 2000
    #alpha = 0.2  # –ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç—ã
    alpha = 0.1        
    frequency = N_URLS * alpha        
    features_dict = dict()

    Qlink = open(INPUT_FILE_1, "r")          # 2000 q_links
    all_links = open(INPUT_FILE_2, "r")        # 20 000 –≤—Å–µ—Ö urls


    get_features(features_dict, random_url(INPUT_FILE_1, N_URLS))
    get_features(features_dict, random_url(INPUT_FILE_2, N_URLS))

    features_dict = dict(sorted(features_dict.items(), key=lambda x:-x[1]))

    with open(OUTPUT_FILE, 'w') as out:
        for i in features_dict:
            if features_dict[i] > frequency:
                out.write(str(i)+'\t'+str(features_dict[i])+'\n')


    Qlink.close()
    all_links.close()

 #print >> sys.stderr, "Not implemented"
